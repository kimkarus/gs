function myFunction() {
  var spreadsheetId = "<sheet id>";
  //
  var need_projects_name = kts.getProjectsFor(10, spreadsheetId);
  var default_name = kts.getProjectsFor(11, spreadsheetId).toString();
  var token = kts.getProjectsFor(9, spreadsheetId).toString();
  var api_URL = "https://todoist.com/API/v7/sync";
  var api_URL_completed_get_all = "https://todoist.com/api/v7/completed/get_all";
  var api_URL_V8 = "https://beta.todoist.com/API/v8/";
  var conifig_param_url_fetch = [[6, 2],[7, 2], [8, 2]];
  initializeSheets(spreadsheetId);
  if(!kts.checkUrlfetch(spreadsheetId, true, conifig_param_url_fetch)) return;
  var data_c = kts.getResource(api_URL, token, 7, '["collaborators"]', null, null, null, spreadsheetId, conifig_param_url_fetch);
  var data_p = kts.getResource(api_URL, token, 7, '["projects"]', null, null, null, spreadsheetId, conifig_param_url_fetch);
  var data_l = kts.getResource(api_URL, token, 7, '["labels"]', null, null, null, spreadsheetId, conifig_param_url_fetch);
  var data = kts.getResource(api_URL, token, 7, '["items"]', null, null, null, spreadsheetId, conifig_param_url_fetch);

  var count_c = 100;
  count_c = kts.getParamValue(3, spreadsheetId);
  var ipc_start = 0;
  //
  var tmp_var = kts.getParamValue(2, spreadsheetId);
  if(tmp_var > 0 && tmp_var < count_c) ipc_start = tmp_var;
  //
  var tmp_var3 = kts.getParamValue(4, spreadsheetId);
  var tmp_var4 = kts.getParamValue(5, spreadsheetId);
  //
  //
  var need_refresh_tasks = false;
  if(ipc_start <=0) need_refresh_tasks = true;
  if(tmp_var3 == null || tmp_var3 == 0) need_refresh_tasks = true;
  if(tmp_var3 != null) {
    if(tmp_var > 0){
      if((tmp_var / tmp_var4) > tmp_var3) need_refresh_tasks = true;
    }
  }
  //
  if(need_refresh_tasks ) {
    grabTasks(data, data_c, data_p, data_l, need_projects_name, spreadsheetId, token, false, default_name, "Work", true, conifig_param_url_fetch);
    kts.setParamConfig("refreshed", Math.floor(tmp_var / tmp_var4), 4, spreadsheetId);
  }
  //
  for(var ipc = ipc_start; ipc < count_c;  ipc++){
    var data_completed_tasks = kts.getResource(api_URL_completed_get_all, token, 7, '["items"]', ipc, null, null, spreadsheetId, conifig_param_url_fetch);
    kts.setParamConfig("completed_tasks_ipc", ipc, 2, spreadsheetId);
    if(data_completed_tasks==null) break;
    grabTasks(data_completed_tasks, data_c, data_p, data_l, need_projects_name, spreadsheetId, token, true, default_name, "Work", false, conifig_param_url_fetch);
  }
}
function initializeSheets(spreadsheetId)
{
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  kts.checkExistenceSheets(ss, "config");
  kts.checkExistenceSheets(ss, "Work");
}
function grabTasks(data, data_c, data_p, data_l, need_projects_name, spreadsheetId, token, completed_tasks, default_name, sheet_name, is_refreshing, conifig_param_url_fetch) {
  if(data == null || data_c == null || data_p == null) return;
  var all_tasks = [];
  var filtered_tasks = [];
  var accept_project_entries = kts.getAcceptProjects(need_projects_name, data_p);
  
  for each(var row in data.items) {
    var item = kts.getTaskItem(row, completed_tasks, token, spreadsheetId, is_refreshing, data_p, data_l, data_c, default_name, conifig_param_url_fetch);
    if(item == null) continue;
    if (item.is_deleted == 1) continue;
    all_tasks = kts.insertItemArray(all_tasks, item);           
    var is_good = kts.checkAcceptProjectsId(accept_project_entries, item.project_id);
    if(!is_good) continue;
    filtered_tasks = kts.insertItemArray(filtered_tasks, item);  
  }
  //
  var ss = SpreadsheetApp.openById(spreadsheetId);
  var idRowStart = 2; 
  Logger.log("allTasks: " + all_tasks.length);
  Logger.log("allTasks: " + filtered_tasks.length);
  processTasks(sheet_name, ss, filtered_tasks, false, true, spreadsheetId, token, conifig_param_url_fetch);
  
}
function processTasks(sheet_name, ss, arr, clean_range, check_exists, spreadsheetId, token)
{
  var sheet = ss.getSheetByName(sheet_name);
  if(clean_range) sheet.clear();
  setHeader(sheet, ss);
  fillSheet(arr, sheet, check_exists, spreadsheetId, token);  
}
function fillSheet(arr, sheet, check_exists, spreadsheetId, token)
{
  var maxRows = kts.getMaxCountRows(sheet);
  var sheet_values = sheet.getDataRange().getValues();
  for (i = 0; i < arr.length; i++)
  {
    var index = i;
    maxRows = kts.getMaxCountRows(sheet);
    var row_number = checkItimeId(arr[index].id, sheet_values, maxRows, check_exists);
    if(row_number >= 0){
      sheet_values = modifyItem(arr[index], sheet, row_number, spreadsheetId, token, sheet_values);
    } 
  }
  //
  var range = sheet.getDataRange();
  try{
    range.setValues(sheet_values);
  } catch(e){
    Logger.log("error: " + e);
  }
  //
  for (i = 0; i < arr.length; i++)
  {
    var index = i;
    maxRows = kts.getMaxCountRows(sheet);
    var row_number = checkItimeId(arr[index].id, sheet_values, maxRows, check_exists);
    if(row_number >= 0){
      //modifyItem(arr[index], sheet, row_number, spreadsheetId, token, sheet_values);
    } else {
      addModifyItem(arr[index], sheet, maxRows+1);
      maxRows = maxRows+1;
      sheet_values = sheet.getDataRange().getValues();
    }
  }
  
  
  //sheet.getDataRange().setValues(sheet_values);
}
function setHeader(sheet, ss)
{
  //create date
  sheet.getRange(1, 1, 1, 1).setValue("Создана");
  //date due to
  sheet.getRange(1, 2, 1, 1).setValue("Срок до");
  //date completed
  sheet.getRange(1, 3, 1, 1).setValue("Дата выполнения");
  //year completed
  sheet.getRange(1, 4, 1, 1).setValue("Год");
  //month completed
  sheet.getRange(1, 5, 1, 1).setValue("Месяц");
  //day completed
  sheet.getRange(1, 6, 1, 1).setValue("День");
  //day of week completed
  sheet.getRange(1, 7, 1, 1).setValue("День недели");
  //all day
  sheet.getRange(1, 8, 1, 1).setValue("Весь день");
  //subject
  sheet.getRange(1, 9, 1, 1).setValue("Задача");
  //priority
  sheet.getRange(1, 10, 1, 1).setValue("Приоритет");
  //responsible_uid
  sheet.getRange(1, 11, 1, 1).setValue("Ответственный ИД");
  //user_name
  sheet.getRange(1, 12, 1, 1).setValue("Ответственный");
  //completed
  sheet.getRange(1, 13, 1, 1).setValue("Выполнена");
  //project id
  sheet.getRange(1, 14, 1, 1).setValue("Проект ИД");
  //project
  sheet.getRange(1, 15, 1, 1).setValue("Проект");
  //project parent id
  sheet.getRange(1, 16, 1, 1).setValue("Проект родитель ИД");
  //item id
  sheet.getRange(1, 17, 1, 1).setValue("ИД");
  //
  sheet.getRange(1, 18, 1, 1).setValue("Дата изменения");
  //
  sheet.getRange(1, 19, 1, 1).setValue("Статус изменений");
  //
  sheet.getRange(1, 20, 1, 1).setValue("Дата проверки");
  //
  sheet.getRange(1, 21, 1, 1).setValue("Время проверки");
  //year creation
  sheet.getRange(1, 22, 1, 1).setValue("Год создания");
  //month creation
  sheet.getRange(1, 23, 1, 1).setValue("Месяц создания");
  //year due to
  sheet.getRange(1, 24, 1, 1).setValue("Год выполнить до");
  //Month due to
  sheet.getRange(1, 25, 1, 1).setValue("Месяц выполнить до");
  //Count
  sheet.getRange(1, 26, 1, 1).setValue("Количество");
  //Labels
  sheet.getRange(1, 27, 1, 1).setValue("Теги:");
}
function modifyItem(item, sheet, row_number, spreadsheetId, token, sheet_values)
{
  var id_modified = -1;
  
  //var is_completed = sheet.getRange(row_number, 13, 1, 1).getValues()[0][0];
  var is_completed = sheet_values[row_number][12];
  var item_is_completed = item.completed;
  if(is_completed != item_is_completed) 
  {
    id_modified = 1;
  }
  //
  //var name = sheet.getRange(row_number, 9, 1, 1).getValues()[0][0];
  var name = sheet_values[row_number][8];
  var item_name = item.content;
  if(name != item_name) 
  {
    id_modified = 2;
  }
  //
  //var responsible_uid = sheet.getRange(row_number, 11, 1, 1).getValues()[0][0];
  var responsible_uid = sheet_values[row_number][10];
  var item_responsible_uid = item.responsible_uid;
  if(responsible_uid != item_responsible_uid && item_responsible_uid != null) 
  {
    id_modified = 3;
  }
  //
  //var priority = sheet.getRange(row_number, 10, 1, 1).getValues()[0][0];
  var priority = sheet_values[row_number][9];
  var item_priority = item.priority;
  if(priority != item_priority) 
  {
    id_modified = 4;
  }
  //var day_completed = sheet.getRange(row_number, 6, 1, 1).getValues()[0][0];
  var day_completed = sheet_values[row_number][5];
  var item_day_completed = item.day_completed;
  if(day_completed != item_day_completed) 
  {
    id_modified = 5;
  }
  var arr = kts.insertItemArrayIndexes(item);
  if(id_modified > 0){
    for(var j = 0; j < 26; j++){
      if(arr[j] == "" || arr[j] == null) continue;
      sheet_values[row_number][j] = arr[j];
    }
  }
  //var label = sheet.getRange(row_number, 27, 1, 1).getValues()[0][0];
  var label = sheet_values[row_number][26];
  var item_label = item.labels[0];
  if(label != item_label) 
  {
    id_modified = 7;
    var labels = item.labels;
    var index_col_start = 26;
    if(labels != null){
      var count_l = labels.length;
      if(count_l > 0){
        for (var i = 0; i < count_l; i++){
          var label = labels[i].toString();
          sheet_values[row_number, index_col_start] = label;
        }
      }
    }
  }
  //
  item.id_modified = id_modified.toString();
  
  if(id_modified > 0) {
    sheet_values[row_number][18] = item.id_modified;
    //addModifyItem(item, sheet, row_number, sheet_values);
  }
  return (sheet_values);
}
function addModifyItem(item, sheet, row_number, id_modified, sheet_values)
{
  var now = new Date();
  if(id_modified != "" || id_modified != null){
    //sheet.getDataRange().setValues(sheet_values);
  } else {
    addNewItem(item, sheet, row_number, id_modified);
  }
  
}
function addNewItem(item, sheet, row_number, id_modified)
{
  var arr = kts.insertItemArrayIndexes(item);
  if(id_modified > 0){
    for(var j = 0; j < 26; j++){
      if(arr[j] == "" || arr[j] == null) continue;
      sheet.getRange(row_number, j+1, 1, 1).setValue(arr[j]);
    }
  }
  //labels
  var labels = item[26];
  var index_col_start = 27;
  if(labels != null){
     var count_l = labels.length;
     if(count_l > 0){
       for (var i = 0; i < count_l; i++){
         var label = labels[i].toString();
         sheet.getRange(row_number, index_col_start+i, 1, 1).setValue(label);
      }
    }
  }
}
function checkItimeId(item_id, sheet_values, count, check_exists)
{
  var index = -1;
  if(!check_exists) return(index);
  item_id = item_id.toString();
  for(j=0; j < count; j++)
  {
    var sheet_item_id = -1;
    index = -1;
    if(sheet_values[j][16] == null || sheet_values[j][16] == "") continue;
    sheet_item_id = sheet_values[j][16].toString();
    if(sheet_item_id == item_id)
    {
      index = j+1;
      break;
    }
  }
  return (index);
}
