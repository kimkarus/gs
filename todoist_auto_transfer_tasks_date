function myFunction() {
  var spreadsheetId = "<sheet id>";
  //
  var need_projects_name_for_home = getProjectsForHome(spreadsheetId);
  var need_projects_name_for_work = getProjectsForWork(spreadsheetId);
  var default_name = "<default name>";
  var token = '<token>';
  var api_URL = "https://todoist.com/API/v7/sync";
  var api_URL_completed_get_all = "https://todoist.com/api/v7/completed/get_all";
  var api_URL_V8 = "https://beta.todoist.com/API/v8/";
  initializeSheets(spreadsheetId);
  if(!checkUrlfetch(spreadsheetId, true)) return;
  var data_c = getResource(api_URL, token, 7, '["collaborators"]', null, null, null, spreadsheetId);
  var data_p = getResource(api_URL, token, 7, '["projects"]', null, null, null, spreadsheetId);
  var data_l = getResource(api_URL, token, 7, '["labels"]', null, null, null, spreadsheetId);
  var data = getResource(api_URL, token, 7, '["items"]', null, null, null, spreadsheetId);
  //
  grabTasks(data, data_c, data_p, data_l, need_projects_name_for_home, spreadsheetId, token, false, default_name, "home", true);
  //
  grabTasks(data, data_c, data_p, data_l, need_projects_name_for_work, spreadsheetId, token, false, default_name, "work", true);
}

function initializeSheets(spreadsheetId)
{
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  checkExistenceSheets(ss, "config");
}
function grabTasks(data, data_c, data_p, data_l, need_projects_name, spreadsheetId, token, completed_tasks, default_name, type, is_refreshing) {
  if(data == null || data_c == null || data_p == null) return;
  var filtered_tasks = [];
  var accept_project_entries = getAcceptProjects(need_projects_name, data_p);
  
  for each(var row in data.items) {
    var item = getTaskItem(row, completed_tasks, token, spreadsheetId, is_refreshing, data_p, data_l, data_c, default_name);
    if(item == null) continue;
    if (item.is_deleted == 1) continue;       
    var is_good = checkAcceptProjectsId(accept_project_entries, item.project_id);
    if(!is_good) continue;
    filtered_tasks = insertItemArray(filtered_tasks, item);  
  }
  //
  processTasks(filtered_tasks, true, spreadsheetId, token, type);  
}
function processTasks(arr, check_exists, spreadsheetId, token, type)
{
  //var sheet = ss.getSheetByName(sheet_name);
  //if(clean_range) sheet.clear();
  //setHeader(sheet, ss);
  //fillSheet(arr, null, check_exists, spreadsheetId, token);
  var p = getP(spreadsheetId, type);
  var day_max = getMaxDay(spreadsheetId, type);
  var now = new Date();
  var arr_days = createEmptyWeek(day_max, p, now);
  
  var group_tasks_out = sortTasks(arr, arr_days, type);
  
  moveTasks(group_tasks_out, token, spreadsheetId, type);
}
function moveTasks(arr, token, spreadsheetId, type)
{
  //for each(var row in arr){
    updateTasks('["items"]', "item_update", token, arr, spreadsheetId);
  //}
}
function sortTasks(arr, arr_days, type)
{
  var arr_move = [];
  var arr_change = [];
  type = type.toUpperCase();
  //
  var now = new Date();
  var now_day = getWeekDay(now);
  var now_month = now.getMonth() + 1;
  //var firstDay = new Date(now.getFullYear(), now.getMonth(), 1); // return first day of the month
  var now_week = getNumberString(Utilities.formatDate(now, "GMT", "w")); 
  var date_next_week = getDate(getDateNextWeek(now));
  //
  for each(var row in arr){
    var item = row[0];
    if(item.week_due > now_week) continue;
    var index = item.day_of_week_due-1;
    if(index < 0) continue;
    arr_days[index].items.push(item);
    arr_days[index].day_count++;
    if(item.priority == 1) arr_days[index].count_p1++;
    if(item.priority == 2) arr_days[index].count_p2++;
    if(item.priority == 3) arr_days[index].count_p3++;
    if(item.priority == 4) arr_days[index].count_p4++;
  }
  //
  for(var i = 0; i < arr_days.length; i++){
    
      for(var j = arr_days[i].items.length - 1; j >= 0; j--){
        var need_change = false;
        if(arr_days[i].items[j].priority == 1 && arr_days[i].count_p1 > arr_days[i].max_p1 && !need_change){
          need_change = true;
        }
        if(arr_days[i].items[j].priority == 2 && arr_days[i].count_p2 > arr_days[i].max_p2 && !need_change){
          need_change = true;
        }
        if(arr_days[i].items[j].priority == 3 && arr_days[i].count_p3 > arr_days[i].max_p3 && !need_change){
          need_change = true;
        }
        if(arr_days[i].items[j].priority == 4 && arr_days[i].count_p4 > arr_days[i].max_p4 && !need_change){
          need_change = true;
        }
        if(need_change){
          if(arr_days[i].items[j].priority == 1) arr_days[i].count_p1--;
          if(arr_days[i].items[j].priority == 2) arr_days[i].count_p2--;
          if(arr_days[i].items[j].priority == 3) arr_days[i].count_p3--;
          if(arr_days[i].items[j].priority == 4) arr_days[i].count_p4--;
          arr_days[i].day_count--;
          arr_change.push(arr_days[i].items[j]);
          arr_days[i].items.splice(j, 1);
          j = arr_days[i].items.length - 1;
        }
      }
  }
  for (var i = 0; i < arr_change.length; i++){
    var need_change = false;
    arr_change[i].due_date_utc = date_next_week;
    if(type == "WORK" && arr_change[i].day_of_week_due >= 6) continue;
    for(var j = 0; j < arr_days.length; j++){
      
      if(arr_days[j].day_count < arr_days[j].day_max){
        
        if(arr_change[i].priority == 1 && (arr_days[j].count_p1 + 1) <= arr_days[j].max_p1 && !need_change){
          need_change = true;
        }
        if(arr_change[i].priority == 2 && (arr_days[j].count_p2 + 1) <= arr_days[j].max_p2 && !need_change){
          need_change = true;
        }
        if(arr_change[i].priority == 3 && (arr_days[j].count_p3 + 1) <= arr_days[j].max_p3 && !need_change){
          need_change = true;
        }
        if(arr_change[i].priority == 4 && (arr_days[j].count_p4 + 1) <= arr_days[j].max_p4 && !need_change){
          need_change = true;
        }
        if(need_change){
          if(arr_change[i].priority == 1) arr_days[j].count_p1++;
          if(arr_change[i].priority == 2) arr_days[j].count_p2++;
          if(arr_change[i].priority == 3) arr_days[j].count_p3++;
          if(arr_change[i].priority == 4) arr_days[j].count_p4++;
          arr_days[j].day_count++;
          arr_change[i].due_date_utc = arr_days[j].date;
          break;
        }
      }
      
    }
    //
    if(!need_change){
      for(var j = 0; j < arr_days.length; j++){
        if(arr_days[j].day_count < arr_days[j].day_max){
          if(arr_change[i].priority == 4 && (arr_days[j].day_count + 1) <= arr_days[j].day_max && !need_change){
            need_change = true;
          }
          if(arr_change[i].priority == 3 && (arr_days[j].day_count + 1) <= arr_days[j].day_max && !need_change){
            need_change = true;
          }
          if(need_change){
            if(arr_change[i].priority == 3) arr_days[j].count_p3++;
            if(arr_change[i].priority == 4) arr_days[j].count_p4++;
            arr_days[j].day_count++;
            arr_change[i].due_date_utc = arr_days[j].date;
            break;
          }
        }
      }
      
    }
  }
  //
  return (arr_change);
}

function getResource(apiURL, token, api_version, resource_type, ipc, id, field_name, spreadsheetId){
  var payload = null;
  if(api_version == 7){
    payload = getPayloadV7(resource_type, token, ipc, id, field_name);
  }
  if(api_version == 8){
    payload = getPayloadV8(resource_type, token, ipc, id, field_name);
  }
  if(api_version == 8){
    apiURL = apiURL+resource_type;
  }
   var options = getOptions(payload);
   var content = getResponseContent(apiURL, options, spreadsheetId);

  return(content);
}
function updateTasks(resource_type, type, token, items, spreadsheetId)
{
  var apiURL = "https://todoist.com/api/v7/sync";
  var commands = getCommands(items, type, 100);
  var payload = getPayloadUpdateV7(resource_type, type, token, items, commands);
  var options = getOptions(payload, "post");
  var content = getResponseContent(apiURL, options, spreadsheetId);

  return(content);
}
function getOptions(payload, method, commands)
{
  if(method == null || method == "") method = "get";
  var options = null;

  options = {
    method : method,
    payload : payload,
    contentType: 'application/x-www-form-urlencoded',
    muteHttpExceptions : true
  };

  return(options);
}
function getPayloadV7(resource_type, token, ipc, id, field_name)
{
  var payload = null;
  if(ipc != null){
    payload =
      {
        "token" : token,
        "sync_token": '*',
        "resource_types" : resource_type,
        "offset" : ipc.toString()
        
      };
  } else {
    if(id != null){
      if(field_name == "item_id")
      {
        payload =
          {
            "token" : token,
            "item_id" : id.toString()
          };
      }
      if(field_name == "label_id")
      {
        payload =
          {
            "token" : token,
            "label_id" : id.toString()
          };
      }
      
    } else {
      payload =
        {
          "token" : token,
          "sync_token": '*',
          "resource_types" : resource_type
        };
    }
  }
  
  return(payload);
}
function getPayloadUpdateV7(resource_type, type, token, items, commands)
{
  var payload = null;

  payload =
    {
      "token" : token,
      "sync_token" : '*',
      "resource_types" : resource_type,
      "commands" : commands
    };
  
  return(payload);
}
function getCommands(items, type, max_count)
{
  var commands = [];
  if(max_count == null || max_count == "") max_count = 100;
  var count = 0;
  for each(var item in items){
    //var args = [];
    var args = {
      "id": item.id.toString(), 
      "due_date_utc": Utilities.formatDate(item.due_date_utc, "GMT", 'yyyy-MM-dd\'T\'HH:mm').toString()
    };
    //args.push(arg);
    //
    var common = {
      "type":  type,
      "temp_id": uuidv4(),
      "uuid": uuidv4(),
      "args": args
    };
    commands.push(common);
    count++;
    if(count >= max_count) break;
  }
  commands = JSON.stringify(commands);
  
  return (commands);
}
function getPayloadV8(resource_type, token, ipc, id, field_name)
{
  var payload = null;
  if(ipc != null){
    payload =
      {
        "token" : token,
        "sync_token": '*',
        "resource_types" : resource_type,
        "offset" : ipc.toString()
        
      };
  } else {
    if(id != null){
      if(field_name == "item_id")
      {
        payload =
          {
            "token" : token,
            "item_id" : id.toString()
          };
      }
      if(field_name == "label_id")
      {
        payload =
          {
            "token" : token,
            "label_id" : id.toString()
          };
      }
      
    } else {
      payload =
        {
          "Authorization": "Bearer "+token
        };
    }
  }
  
  return(payload);
}

function getResponseContent(apiURL, options, spreadsheetId)
{
  if(!checkUrlfetch(spreadsheetId, false)) return(null);
  //
  var response = UrlFetchApp.fetch(apiURL, options);
  var response_content_text = response.getContentText();
  var content = null;
  if(response_content_text != null && response_content_text != "") {
    try{
      content = JSON.parse(response_content_text);
    } catch (e){
      content = null;
    }
  }
  return(content);
}
function checkExistenceSheets(ss, sheet_name)
{
  if (ss.getSheetByName(sheet_name) == null){
    ss.insertSheet(sheet_name);
  }
}
function getProjectsForHome(spreadsheetId)
{
  var tmp = getParamValue(2, spreadsheetId);
  var arr = tmp.split(", ");
  return (arr);
}
function getProjectsForWork(spreadsheetId)
{
  var str = getParamValue(3, spreadsheetId);
  var arr = str.split(", ");
  return (arr);
}
function insertItemArray(arr, item)
{
  arr.push([
    item
  ]);
  
  return (arr);
}
function getTaskItem(item, completed_tasks, token, spreadsheetId, is_refreshing, data_p, data_l, data_c, default_name)
{
  var item_new = getEmptyItemForTask();
  
  if(completed_tasks){
    if(is_refreshing){
      item_new = getSingleItem(token, item.id, spreadsheetId);
    } else {
      item_new = getFillForCompleted(item_new, item);
    }      
  }
  //
  item_new.due_date_utc = getDate(item.due_date_utc);
  item_new.date_added = getDate(item.date_added);
  item_new.date_completed = getDate(item.date_completed);
  
  if(item_new.date_completed != null && item_new.date_completed != ""){
    item_new.year_completed = item_new.date_completed.getFullYear();
    item_new.year_completed = item_new.year_completed.toString();
    item_new.month_completed = item_new.date_completed.getMonth() + 1;
    item_new.month_completed = item_new.month_completed.toString();
    item_new.day_completed = item_new.date_completed.getDate() + 1;
    item_new.day_completed = item_new.day_completed.toString();
    item_new.day_of_week_completed = item_new.date_completed.getDay();
    if(item_new.day_of_week_completed == 0) item_new.day_of_week_completed = 7;
    item_new.day_of_week_completed = item_new.day_of_week_completed.toString();
    item_new.week_completed = getNumberString(Utilities.formatDate(item_new.date_completed, "GMT", "w"));
  }
  if(item_new.due_date_utc != null && item_new.due_date_utc != ""){
    item_new.year_due = item_new.due_date_utc.getFullYear();
    item_new.year_due = item_new.year_due.toString();
    item_new.month_due = item_new.due_date_utc.getMonth() + 1;
    item_new.month_due = item_new.month_due.toString();
    item_new.day_due = item_new.due_date_utc.getDate();
    item_new.day_completed = item_new.due_date_utc.toString();
    item_new.day_of_week_due = getWeekDay(item_new.due_date_utc);
    item_new.week_due = getNumberString(Utilities.formatDate(item_new.due_date_utc, "GMT", "w"));
  }
  if(item_new.date_added != null && item_new.date_added != ""){
    item_new.year_added = item_new.date_added.getFullYear();
    item_new.year_added = item_new.year_added.toString();
    item_new.month_added = item_new.date_added.getMonth();
    item_new.month_added = item_new.month_added.toString();
    item_new.week_added = getNumberString(Utilities.formatDate(item_new.date_added, "GMT", "w"));
  }
  item_new.now = new Date();
  item_new.now_time = item_new.now.getTime();
  //
  item_new.project_id = item.project_id;
  var project = getProject(data_p.projects, item_new.project_id);
  item_new.user_name = getUserName(data_c.collaborators, item.responsible_uid, default_name);
  if(default_name != "" && default_name != null){
    if(item_new.user_name != default_name) return (null);
  }
  //
  if(item.responsible_uid != null) item_new.responsible_uid = item.responsible_uid;
  if(project!=null) item_new.project_name = project.name;
  //
  item_new.labels = getLabelNames(item.labels, data_l, "", token, spreadsheetId);
  item_new.content = item.content;
  item_new.all_day = item.all_day;
  //
  item_new.completed = item.checked;
  item_new.is_deleted = item.is_deleted;
  item_new.id = item.id.toString();
  item_new.project_id = item_new.project_id.toString();
  item_new.responsible_uid = item_new.responsible_uid.toString();
  item_new.priority = item.priority;  
  //
  return (item_new);
}
function getEmptyItemForTask()
{
  var item = new Object();
  item.checked = null;
  item.is_deleted = null;
  item.labels = null;
  //
  item.due_date_utc = null;
  item.year_due = null;
  item.month_due = null;
  item.day_due = null;
  item.day_of_week_due = null;
  item.week_due = null;
  //
  item.date_added = null;
  item.year_added = "";
  item.month_added = "";
  item.week_added = "";
  //
  item.date_completed = null;
  item.year_completed = "";
  item.month_completed = "";
  item.day_completed = "";
  item.day_of_week_completed = "";
  item.week_completed = "";
  //
  item.project_id = null;
  item.responsible_uid = null;
  item.all_day = null;
  item.content = null;
  item.priority = 1;
  item.id = null;
  item.now = "";
  item.now_item = "";
  item.user_name = "";
  item.project_name = "";
  item.responsible_uid = 0;
  item.labels = null;
  item.checked = false;
  item.is_deleted = 0;
  item.content = "";
  item.all_day = true;
  
  return (item);
}
function checkAcceptProjectsId(arr, need_id)
{
  if(arr == null) return(false);
  if(need_id == null) return(false);
  for each(var row in arr) {
    if(row == need_id)return(true);
  }
  return(false);
}
function getSingleItem(token, id, spreadsheetId)
{
  var apiURL = "https://todoist.com/api/v7/items/get";
  var item = null;
  var data = getResource(apiURL, token, 7, '["item"]', null, id, "item_id", spreadsheetId);
  if(data != null) item = data.item;
  return(item);
}
function getFillForCompleted(item, row)
{
  //item.responsible_uid = row.user_id;
  item.user_id = row.user_id;
  item.id = row.id;
  item.project_id = row.project_id;
  item.completed_date = row.completed_date;
  
  return (item);
}
function convertArrStringToNumber(arr)
{
  var count = arr.length;
  for(var i = 0; i< count; i++){
    arr[i] = getNumberString(arr[i]);
  }
  return (arr);
}
function getNumberString(str)
{
  var tmp = -1;
  if(str == null || str == "") return (tmp);
  tmp = Number(str);
  return(tmp);
}
function getP(spreadsheetId, type)
{
  type = type.toUpperCase();
  var row_number = 0;
  var arr = [];
  if(type == "HOME") row_number = 7;
  if(type == "WORK") row_number = 8;
  for(var i=0;i<4;i++){
    var value = getParamValue(row_number, spreadsheetId, i+3);
    arr.push( getNumberString(value));
  }
  
  arr = convertArrStringToNumber(arr);
  return (arr);
}
function getMaxDay(spreadsheetId, type)
{
  var tmp = 1;
  type = type.toUpperCase();
  if(type == "HOME") tmp = getParamValue(4, spreadsheetId);
  if(type == "WORK") tmp = getParamValue(5, spreadsheetId);
  tmp = getNumberString(tmp);
  
  return(tmp);
}
function getUserName(arr, need_id, default_name)
{
  var name = default_name;
  if(arr == null) return(name);
  if(need_id == 0 || need_id == null) return(name);

  for each(var row in arr){
    if(row.id == need_id) {
      name = row.full_name;
      break;
    }
  }

  return(name);
}
function getLabelNames(arr, labels, default_name, token, spreadsheetId)
{
  var name = default_name;
  
  if(arr == null) {
    arr = new Array();
    arr.push([""]);
    return(arr);
  }
  var count = arr.length;
  
  for (var i = 0; i < count; i++){
    arr[i] = getLabelName(arr[i].toString(), labels, "", token, spreadsheetId);
  }

  return(arr);
}
function getLabelName(need_id, labels, default_name, token, spreadsheetId)
{
  var name = default_name;

  if(need_id == 0 || need_id == null || need_id == "" || labels == null) return(name);
  for each(var row in labels.labels){
    if(row.id == need_id) return (row.name);
  }
}
function createDayOfWeek(day, day_max, p, date)
{
  var obj = new Object();
  
  obj.day = Number(day);
  obj.day_max = day_max;
  obj.day_count = 0;
  var MILLIS_PER_DAY = 1000 * 60 * 60 * 24;
  var week_date = getWeekDay(date);
  if(day < week_date){
    obj.date = new Date(date.getTime() - (week_date - day) * MILLIS_PER_DAY);
  } else {
    obj.date = new Date(date.getTime() + (day - week_date) * MILLIS_PER_DAY);
  }
  obj.date = getDate(obj.date);
  if(p != null){
    obj.count_p1 = 0;
    obj.max_p1 = p[0];
    obj.count_p2 = 0;
    obj.max_p2 = p[1];
    obj.count_p3 = 0;
    obj.max_p3 = p[2];
    obj.count_p4 = 0;
    obj.max_p4 = p[3];
  } else {
    obj.count_p1 = 0;
    obj.max_p1 = 0;
    obj.count_p2 = 0;
    obj.max_p2 = 0;
    obj.count_p3 = 0;
    obj.max_p3 = 0;
    obj.count_p4 = 0;
    obj.max_p4 = 0;
  }
  obj.items = [];
  return (obj);
}
function getWeekDay(date)
{
  var day = date.getDay();
  if(day == 0) day = 7;
  return (Number(day));
}
function setParamConfig(param_name, value, row_number, spreadsheetId)
{
  var ss = SpreadsheetApp.openById(spreadsheetId);
  var sheet = ss.getSheetByName("config");
  //
  sheet.getRange(row_number, 1, 1, 1).setValue(param_name);
  sheet.getRange(row_number, 2, 1, 1).setValue(value);
}
function getParamValue(row_number, spreadsheetId, column_number)
{
  var ss = SpreadsheetApp.openById(spreadsheetId);
  var sheet = ss.getSheetByName("config");
  var value = null;
  if(column_number == null || column_number < 1){
    value = sheet.getRange(row_number, 2, 1, 1).getValues()[0][0];
  } else {
    value = sheet.getRange(row_number, column_number, 1, 1).getValues()[0][0];
  }
  if(value == null || value == "") value = -1;
  return(value);
}
function getAcceptProjects(need_projects_name, data_p)
{
  var arr = [];
  for each(var need_project_name in need_projects_name){
    for each(var project in data_p.projects){
      if(project.is_deleted == 1) continue;
      if(arr.length > 0){
        if(project.name.toUpperCase() == need_project_name.toUpperCase()){
          arr.push(project.id);
        } else {
          if(!checkAcceptProjectsId(arr, project.parent_id)) continue;
          if(checkAcceptProjectsId(arr, project.id)) continue;
          arr.push(project.id);
        }
      } else {
        if(project.name.toUpperCase() != need_project_name.toUpperCase()) continue;
        arr.push(project.id);
      }
    }
  }
  return (arr);
}
function getDate(value)
{
  var moment = Moment.moment(value);
    var new_value = "";
    if(moment != null && value != null)
    {
      new_value = moment.toDate();
    }
  return(new_value);
}
function getProject(arr, need_id)
{
  var obj = null;
  if(arr == null) return(obj);

  for each(var row in arr){
    if(row.id == need_id) {
      obj = row;
      break;
    }
  }

  return(obj);
}
function checkUrlfetch(spreadsheetId, is_start)
{
  var tmp_var5 = getParamValue(17, spreadsheetId);
  tmp_var5 = Number(tmp_var5);
  if(tmp_var5 < 0) tmp_var5 = 0;
  var tmp_var6 = getParamValue(18, spreadsheetId);
  tmp_var6 = Number(tmp_var6);
  //urlfetch
  var percent = tmp_var5 /  tmp_var6 * 100;
  //
  var now = new Date();
  var now_day = now.getDay();
  var urlfetch_date = getDate(getParamValue(19, spreadsheetId));
  var urlfetch_date_day = urlfetch_date.getDay();
  //
  if(percent > 90 && now_day == urlfetch_date_day) return(false);
  if(is_start) return(true);
  setParamConfig("urlfetch", tmp_var5 + 1, 17, spreadsheetId);
  setParamConfig("urlfetch_date", now, 19, spreadsheetId);
  return(true);
}
function getDateNextWeek(date)
{
  var MILLIS_PER_DAY = 1000 * 60 * 60 * 24;
  
  var now_day = getWeekDay(date);
  //
  var next_week = new Date(date.getTime() + (8 - now_day) * MILLIS_PER_DAY);
  return (next_week);
  
}
function createEmptyWeek(day_max, p, date)
{
  var arr_obj = [];
  
  for(var i=0;i<7;i++){
    var obj = createDayOfWeek(i+1, day_max, p, date);
    arr_obj.push(obj);
  }
  
  return (arr_obj);
}
function uuidv4() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}
