function myFunction() {
  var token = '<token>';
  var api_URL = "https://todoist.com/API/v7/sync";
  var api_URL_completed_get_all = "https://todoist.com/api/v7/completed/get_all";
  var data_c = getResource(api_URL, token, '["collaborators"]');
  var data_p = getResource(api_URL, token, '["projects"]');
  var data = getResource(api_URL, token, '["items"]');
  var need_project_name = "<name project for searching>";
  var spreadsheetId = "<id google sheet>";
  grabAllTasks(data, data_c, data_p, need_project_name, spreadsheetId);
  
  var count_c = 100;
  count_c = getParamValue(2, spreadsheetId);
  var ipc_start = 0;
  //
  var tmp_var = getParamValue(1, spreadsheetId);
  if(tmp_var > 0 && tmp_var < count_c) ipc_start = tmp_var;
  //
  for(var ipc = ipc_start; ipc < count_c;  ipc++){
    var data_completed_tasks = getResource(api_URL_completed_get_all, token, '["items"]', ipc);
    setParamConfig("completed_tasks_ipc", ipc, 1, spreadsheetId);
    if(data_completed_tasks==null) break;
    grabCompletedTasks(data_completed_tasks, data_c, data_p, need_project_name, spreadsheetId);
  }
}
function setParamConfig(param_name, value, column_number, spreadsheetId)
{
  var ss = SpreadsheetApp.openById(spreadsheetId);
  var sheet = ss.getSheetByName("config");
  //
  sheet.getRange(1, column_number, 1, 1).setValue(param_name);
  sheet.getRange(2, column_number, 1, 1).setValue(value);
  
}
function getParamValue(column_number, spreadsheetId)
{
  var ss = SpreadsheetApp.openById(spreadsheetId);
  var sheet = ss.getSheetByName("config");
  var value = null;
  value = sheet.getRange(2, column_number, 1, 1).getValues()[0][0];
  if(value == null || value == "") value = -1;
  return(value);
}
function getResource(apiURL, token, resource_type, ipc){
  if(ipc != null) {
          var payload =
          {
            "token" : token,
            "sync_token": '*',
            "resource_types" : resource_type,
            "offset" : ipc.toString()
            
          };
      var options =
          {
            method : "get",
            payload : payload,
            contentType: 'application/x-www-form-urlencoded',
            muteHttpExceptions : true
          };
  }
    else{    
      var payload =
          {
            "token" : token,
            "sync_token": '*',
            "resource_types" : resource_type
          };
      var options =
          {
            method : "get",
            payload : payload,
            contentType: 'application/x-www-form-urlencoded',
            muteHttpExceptions : true
          };
    }

   var content = getResponseContent(apiURL, options);

  return(content);
}


function getResponseContent(apiURL, options)
{
  var response = UrlFetchApp.fetch(apiURL, options);
  var response_content_text = response.getContentText();
  var content = null;
  if(response_content_text != null && response_content_text != "") var content = JSON.parse(response_content_text);
  return(content);
}
function grabAllTasks(data, data_c, data_p, need_project_name, spreadsheetId) {
  //var data = getAllTasksV8();
  if(data == null || data_c == null || data_p == null) return;
  var all_tasks = [];
  var filtered_tasks = [];
  var accept_project_entries = [];
  for each(var project in data_p.projects){
    if(project.is_deleted == 1) continue;
    if(accept_project_entries.length > 0){
       if(!checkAcceptProjectsId(accept_project_entries, project.parent_id)) continue;
       if(checkAcceptProjectsId(accept_project_entries, project.id)) continue;
       accept_project_entries.push(project.id);
      } else {
        if(project.name.toUpperCase() != need_project_name.toUpperCase()) continue;
        accept_project_entries.push(project.id);
      }
  }
  
  for each(var row in data.items) {
    var is_good = false;
    var completed = row.checked;
    
    if (row.is_deleted == 1) continue;
    
    var due_date_utc_moment = Moment.moment(row.due_date_utc);
    var due_date_utc = 0;
    if(due_date_utc_moment != null)
    {
      due_date_utc = due_date_utc_moment.toDate();
    }
    var date_added_moment = Moment.moment(row.date_added);
    var date_added = 0;
    if(date_added_moment != null)
    {
      date_added = date_added_moment.toDate();
    }
    var year_added = date_added.getFullYear();
    var project = getProject(data_p.projects, row.project_id);
    var user_name = getUserName(data_c.collaborators, row.responsible_uid);
    //
    var project_name = project.name;
    
    all_tasks.push([
           date_added,
           year_added,
           due_date_utc,
           row.all_day, 
           row.content,
           row.priority,
           row.responsible_uid,
           user_name, 
           completed,
           row.project_id,
           project_name,
           "",
           row.id
         ]);
    
    is_good = checkAcceptProjectsId(accept_project_entries, row.project_id);
    if(!is_good) continue;

         filtered_tasks.push([
           date_added,
           year_added,
           due_date_utc,
           row.all_day, 
           row.content,
           row.priority,
           row.responsible_uid,
           user_name, 
           completed,
           row.project_id,
           project_name,
           "",
           row.id
         ]);
  }
  //
  
  var ss = SpreadsheetApp.openById(spreadsheetId);
  
  
  var idRowStart = 2; 
  Logger.log("allTasks: " + all_tasks.length);
  Logger.log("allTasks: " + filtered_tasks.length);
  
  processTasks("Work", ss, filtered_tasks, false, true);
  //processTasks("All", ss, all_tasks, true, false);
  //processTasks("Borisov Pavel", ss, filtered_tasks, false, true, 19198224);
  
}
function grabCompletedTasks(data, data_c, data_p, need_project_name, spreadsheetId) {
  if(data == null || data_c == null || data_p == null) return;
  //var data = getAllTasksV8();
  var all_tasks = [];
  var filtered_tasks = [];
  var accept_project_entries = [];
  for each(var project in data_p.projects){
    if(project.is_deleted == 1) continue;
    if(accept_project_entries.length > 0){
       if(!checkAcceptProjectsId(accept_project_entries, project.parent_id)) continue;
       if(checkAcceptProjectsId(accept_project_entries, project.id)) continue;
       accept_project_entries.push(project.id);
      } else {
        if(project.name.toUpperCase() != need_project_name.toUpperCase()) continue;
        accept_project_entries.push(project.id);
      }
  }
  var input_completed = 1;
  for each(var row in data.items) {
    var is_good = false;
    
    var completed = input_completed;
        
    var project = getProject(data_p.projects, row.project_id);
    //
    var project_name = "";
    var user_name = getUserName(data_c.collaborators, row.user_id);
    if(project != null) project_name = project.name;
    
    all_tasks.push([
           0,
           0,
           0,
           0, 
           row.content,
           0,
           row.user_id,
           user_name, 
           completed,
           row.project_id,
           project_name,
           "",
           row.id
         ]);
    
    is_good = checkAcceptProjectsId(accept_project_entries, row.project_id);
    if(!is_good) continue;

         filtered_tasks.push([
           0,
           0,
           0,
           0, 
           row.content,
           0,
           0,
           user_name, 
           completed,
           row.project_id,
           project_name,
           "",
           row.id
         ]);
  }
  //

  var ss = SpreadsheetApp.openById(spreadsheetId);
  
  
  var idRowStart = 2; 
  Logger.log("allTasks: " + all_tasks.length);
  Logger.log("allTasks: " + filtered_tasks.length);
  
  processTasks("Work", ss, filtered_tasks, false, true);
  //processTasks("All", ss, all_tasks, false, true);
  //processTasks("Borisov Pavel", ss, filtered_tasks, false, true, 19198224);
  
}
function processTasks(sheet_name, ss, arr, clean_range, check_exists, id_user)
{
  var sheet = ss.getSheetByName(sheet_name);
  if(clean_range) sheet.clear();
  setHeader(sheet, ss);
  sortArr(arr, 3);
  fillSheet(arr, sheet, check_exists, id_user);  
}
function sortArr(arr, indexCol)
{
  // Sort tasks by due date [indexCol]
  arr.sort(function(a,b) {
    if (b[indexCol] < a[indexCol]) 
      {return 1;} 
    else 
      {return -1;}
  });
}
function fillSheet(arr, sheet, check_exists, id_user)
{
  var maxRows = getMaxCountRows(sheet);
  
  for (i = 0; i < arr.length; i++)
  {
    var index = i;
    if(id_user != null) if(id_user != arr[index][6]) continue;
    var row_id = checkItimeId(arr[index][12], sheet, maxRows, check_exists);
    if(row_id >= 0){
      modifyItem(arr[index], sheet, row_id+1);
    } else {
      addNewItem(arr[index], sheet, maxRows+1);
      maxRows = maxRows+1;
    }
  }
}
function setHeader(sheet, ss)
{
  //var range = sheet.getDataRange();
  
  //create date
  sheet.getRange(1, 1, 1, 1).setValue("Создана");
  //create year
  sheet.getRange(1, 2, 1, 1).setValue("Год");
  //date due to
  sheet.getRange(1, 3, 1, 1).setValue("Срок до");
  //all day
  sheet.getRange(1, 4, 1, 1).setValue("Весь день");
  //subject
  sheet.getRange(1, 5, 1, 1).setValue("Задача");
  //priority
  sheet.getRange(1, 6, 1, 1).setValue("Приоритет");
  //responsible_uid
  sheet.getRange(1, 7, 1, 1).setValue("Ответственный ИД");
  //user_name
  sheet.getRange(1, 8, 1, 1).setValue("Ответственный");
  //completed
  sheet.getRange(1, 9, 1, 1).setValue("Выполнена");
  //project id
  sheet.getRange(1, 10, 1, 1).setValue("Проект ИД");
  //project
  sheet.getRange(1, 11, 1, 1).setValue("Проект");
  //project parent id
  sheet.getRange(1, 12, 1, 1).setValue("Проект родитель ИД");
  //item id
  sheet.getRange(1, 13, 1, 1).setValue("ИД");
  //
  sheet.getRange(1, 14, 1, 1).setValue("Дата изменения");
  //
  sheet.getRange(1, 15, 1, 1).setValue("Статус изменений");
  //
  sheet.getRange(1, 16, 1, 1).setValue("Дата проверки");
  //
  sheet.getRange(1, 17, 1, 1).setValue("Время проверки");
}
function modifyItem(item, sheet, row_number)
{
  var id_modified = 0;
  
  var is_completed = sheet.getRange(row_number, 9, 1, 1).getValues()[0][0];
  var item_is_completed = item[8];
  if(is_completed != item_is_completed) 
  {
    sheet.getRange(row_number, 9, 1, 1).setValue(item_is_completed);
    id_modified = 1;
  }
  //
  
  var name = sheet.getRange(row_number, 5, 1, 1).getValues()[0][0];
  var item_name = item[4];
  if(name != item_name) 
  {
    sheet.getRange(row_number, 5, 1, 1).setValue(item_name);
    id_modified = 2;
  }
  //
  
  var responsible_uid = sheet.getRange(row_number, 7, 1, 1).getValues()[0][0];
  var item_responsible_uid = item[6];
  if(responsible_uid != item_responsible_uid && item_responsible_uid != null) 
  {
    sheet.getRange(row_number, 7, 1, 1).setValue(item_responsible_uid);
    id_modified = 3;
  }
  //
  
  var priority = sheet.getRange(row_number, 6, 1, 1).getValues()[0][0];
  var item_priority = item[5];
  if(priority != item_priority) 
  {
    sheet.getRange(row_number, 6, 1, 1).setValue(item_priority);
    id_modified = 4;
  }
  //
  var user_id = sheet.getRange(row_number, 7, 1, 1).getValues()[0][0];
  var user_name = sheet.getRange(row_number, 8, 1, 1).getValues()[0][0];
  var item_user_id = item[6];
  var item_user_name = item[7];
  if(item_user_name != 0){
    if(user_name != item_user_name) 
    {
      sheet.getRange(row_number, 7, 1, 1).setValue(item_user_id);
      sheet.getRange(row_number, 8, 1, 1).setValue(item_user_name);
      id_modified = 5;
    }
  }
  
  /*var due_date_utc = sheet.getRange(row_number, 3, 1, 1).getValue();
  var item_due_date_utc = item[2];
  if(due_date_utc != item_due_date_utc) 
  {
    sheet.getRange(row_number, 3, 1, 1).setValue(item_due_date_utc);
    is_modified = 5;
  }*/
  var now = new Date();
  if(id_modified > 0)
  {
    
    sheet.getRange(row_number, 14, 1, 1).setValue(now);
    sheet.getRange(row_number, 15, 1, 1).setValue(id_modified);
    sheet.getRange(row_number, 17, 1, 1).setValue(now.getTime());
  }
  //sheet.getRange(row_number, 16, 1, 1).setValue(now);
  //sheet.getRange(row_number, 17, 1, 1).setValue(now.getTime());
  
}
function addNewItem(item, sheet, row_number)
{
  var now = new Date();
    //create date
  sheet.getRange(row_number, 1, 1, 1).setValue(item[0]);
    //create year
  sheet.getRange(row_number, 2, 1, 1).setValue(item[1]);
    //date due to
  sheet.getRange(row_number, 3, 1, 1).setValue(item[2]);
    //all day
  sheet.getRange(row_number, 4, 1, 1).setValue(item[3]);
    //subject
  sheet.getRange(row_number, 5, 1, 1).setValue(item[4]);
    //priority
  sheet.getRange(row_number, 6, 1, 1).setValue(item[5]);
    //responsible_uid
  sheet.getRange(row_number, 7, 1, 1).setValue(item[6]);
    //user_name
  sheet.getRange(row_number, 8, 1, 1).setValue(item[7]);
    //completed
  sheet.getRange(row_number, 9, 1, 1).setValue(item[8]);
    //project id
  sheet.getRange(row_number, 10, 1, 1).setValue(item[9]);
    //project
  sheet.getRange(row_number, 11, 1, 1).setValue(item[10]);
    //project parent id
  sheet.getRange(row_number, 12, 1, 1).setValue(item[11]);
    //item id
  sheet.getRange(row_number, 13, 1, 1).setValue(item[12]);
    //
  //
  //
  sheet.getRange(row_number, 16, 1, 1).setValue(now);
  sheet.getRange(row_number, 17, 1, 1).setValue(now.getTime());
}
function checkItimeId(item_id, sheet, count, check_exists)
{
  var index = -1;
  if(!check_exists) return(index);
  //sheet.getRange(row, column)
  
  for(j=0; j < count; j++)
  {
    index = -1;
    var id = sheet.getRange(j+1, 13, 1, 1).getValues()[0][0];
    //var id = sheet.getRange(j+1, 13, 1, 1).getValue();
    if(id == item_id)
    {
      index = j;
      break;
    }
  }
  return (index);
}
function getUserName(arr, need_id)
{
  var name = "<default name>";
  if(arr == null) return(name);
  if(need_id == 0 || need_id == null) return(name);

  for each(var row in arr){
    if(row.id == need_id) {
      name = row.full_name;
      break;
    }
  }

  return(name);
}
function getProject(arr, need_id)
{
  var obj = null;
  if(arr == null) return(obj);

  for each(var row in arr){
    if(row.id == need_id) {
      obj = row;
      break;
    }
  }

  return(obj);
}
function checkAcceptProjectsId(arr, need_id)
{
  if(arr == null) return(false);
  if(need_id == null) return(false);
  for each(var row in arr) {
    if(row == need_id)return(true);
  }
  return(false);
}

function grabHeader(headerRange) {

  
  //Grab the Sheet, configure range, delete old data
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheets = ss.getSheetByName('Today');
  var sheet = ss.getActiveSheet();
  var startLocation = sheet.getRange(headerRange);
  sheet.getRange(startLocation.getRow(), startLocation.getColumn(), 1, 1).clearContent();
  
  var todaysDate = Utilities.formatDate(new Date(), SpreadsheetApp.getActive().getSpreadsheetTimeZone(), "EEEE, MMMM d, yyyy");
  sheet.getRange(headerRange).setValue(todaysDate);
  
}
function getMaxCountRows(sheet)
{
  var count = 0;
  var sheet_data = sheet.getDataRange().getValues();
  for(var i = sheet_data.length-1 ; i >=0 ; i--){
    if (sheet_data[i][0] != null && sheet_data[i][0] != ''){
      count=i+1;
      break;
    }
  }
  
  return(count);
}
